// Generated by Xata Codegen 0.23.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Users",
    columns: [
      { name: "name", type: "string" },
      { name: "email", type: "email" },
      { name: "bio", type: "text" },
    ],
  },
  {
    name: "Images",
    columns: [
      {
        name: "url",
        type: "string",
        notNull: true,
        defaultValue: "'https://thispersondoesnotexist.com/'",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["Users"];
export type UsersRecord = Users & XataRecord;

export type Images = InferredTypes["Images"];
export type ImagesRecord = Images & XataRecord;

export type DatabaseSchema = {
  Users: UsersRecord;
  Images: ImagesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://jing-yu-s-workspace-ocn9ft.eu-west-1.xata.sh/db/react-demo",
  enableBrowser: true,
  apiKey: "xau_xjk8TLS1yD3hSbLxSWJY1iZpHduM1zL00",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
